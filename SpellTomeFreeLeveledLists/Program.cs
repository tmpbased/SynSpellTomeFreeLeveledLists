using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;
using System.Threading.Tasks;

namespace SpellTomeFreeLeveledLists
{
    public class Program
    {
        static Lazy<PatcherConfig> configOptions = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(nickname: "Mod Settings", path: "patchSettings.json", out configOptions)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SpellTomeFreeLeveledLists.esp")
                .Run(args);
        }

        public static bool IsSpellTome(ILinkCache linkCache, LeveledItemEntry leveledItemEntry)
        {
            return IsSpellTome(linkCache, leveledItemEntry.Data?.Reference.TryResolve(linkCache));
        }

        public static bool IsSpellTome(ILinkCache linkCache, IFormLinkGetter<ISkyrimMajorRecordGetter> formLinkGetter)
        {
            return IsSpellTome(linkCache, formLinkGetter.TryResolve(linkCache) as IItemGetter);
        }

        public static bool IsSpellTome(ILinkCache linkCache, IItemGetter? getter)
        {
            int minSkillLevel = configOptions.Value.MinSpellTomeSkillLevel, maxSkillLevel = configOptions.Value.MaxSpellTomeSkillLevel;
            if (maxSkillLevel != -1 && minSkillLevel > maxSkillLevel)
            {
                // [0..minSkillLevel) ∪ (maxSkillLevel..+inf) -> [0..+inf)
                return (getter as IBookGetter)?.Teaches is BookSpell;
            }
            uint? skillLevel = ((getter as IBookGetter)?.Teaches as BookSpell)?.Spell.TryResolve(linkCache)?.Effects.Max(effect => effect.BaseEffect.TryResolve(linkCache)?.MinimumSkillLevel);
            if (skillLevel is null)
            {
                return false;
            }
            return skillLevel > maxSkillLevel && maxSkillLevel != -1 // skillLevel ∈ (maxSkillLevel..+inf), if maxSkillLevel != -1
                || skillLevel < minSkillLevel; // skillLevel ∈ [0..minSkillLevel)
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int minSkillLevel = configOptions.Value.MinSpellTomeSkillLevel, maxSkillLevel = configOptions.Value.MaxSpellTomeSkillLevel;
            if (minSkillLevel == 0 && maxSkillLevel == -1)
            {
                Console.WriteLine("Turned off.");
                return;
            }
            ILinkCache linkCache = state.LoadOrder.ListedOrder.ToImmutableLinkCache();
            int leveledListCount = 0, leveledListSpellTomeCount = 0, spellTomeCount = 0;
            foreach (ILeveledItemGetter? getter in state.LoadOrder.PriorityOrder.LeveledItem().WinningOverrides())
            {
                leveledListCount++;
                LeveledItem leveledItem = getter.DeepCopy();
                int count;
                if ((count = leveledItem.Entries?.RemoveAll(leveledItemEntry => IsSpellTome(linkCache, leveledItemEntry)) ?? 0) > 0)
                {
                    leveledListSpellTomeCount++;
                    spellTomeCount += count;
                    state.PatchMod.LeveledItems.Set(leveledItem);
                }
                if (leveledListCount % 100 == 0)
                {
                    Console.WriteLine($"Processed {leveledListCount}: Found {leveledListSpellTomeCount} lists to clean, removed spell tomes {spellTomeCount}.");
                }
            }
            foreach (IFormListGetter? getter in state.LoadOrder.PriorityOrder.FormList().WinningOverrides())
            {
                leveledListCount++;
                FormList formList = getter.DeepCopy();
                int count;
                if ((count = formList.Items.RemoveAll(formLinkGetter => IsSpellTome(linkCache, formLinkGetter))) > 0)
                {
                    leveledListSpellTomeCount++;
                    spellTomeCount += count;
                    state.PatchMod.FormLists.Set(formList);
                }
                if (leveledListCount % 100 == 0)
                {
                    Console.WriteLine($"Processed {leveledListCount}: Found {leveledListSpellTomeCount} lists to clean, removed spell tomes {spellTomeCount}.");
                }
            }
        }
    }
}
